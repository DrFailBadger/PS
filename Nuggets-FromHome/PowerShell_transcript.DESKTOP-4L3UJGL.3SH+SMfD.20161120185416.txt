**********************
Windows PowerShell transcript start
Start time: 20161120185416
Username: DESKTOP-4L3UJGL\David
RunAs User: DESKTOP-4L3UJGL\David
Machine: DESKTOP-4L3UJGL (Microsoft Windows NT 10.0.14393.0)
Host Application: C:\WINDOWS\system32\WindowsPowerShell\v1.0\PowerShell_ISE.exe
Process ID: 4576
PSVersion: 5.1.14393.206
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.14393.206
BuildVersion: 10.0.14393.206
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\Users\David\Documents\GitHub\Nuggets\PowerShell_transcript.DESKTOP-4L3UJGL.3SH+SMfD.20161120185416.txt
PS C:\>
PS>Get-Process | gm


   TypeName: System.Diagnostics.Process

Name                       MemberType     Definition
----                       ----------     ----------
Handles                    AliasProperty  Handles = Handlecount
Name                       AliasProperty  Name = ProcessName
NPM                        AliasProperty  NPM = NonpagedSystemMemorySize64
PM                         AliasProperty  PM = PagedMemorySize64
SI                         AliasProperty  SI = SessionId
VM                         AliasProperty  VM = VirtualMemorySize64
WS                         AliasProperty  WS = WorkingSet64
Disposed                   Event          System.EventHandler Disposed(System.Obj...
ErrorDataReceived          Event          System.Diagnostics.DataReceivedEventHan...
Exited                     Event          System.EventHandler Exited(System.Objec...
OutputDataReceived         Event          System.Diagnostics.DataReceivedEventHan...
BeginErrorReadLine         Method         void BeginErrorReadLine()
BeginOutputReadLine        Method         void BeginOutputReadLine()
CancelErrorRead            Method         void CancelErrorRead()
CancelOutputRead           Method         void CancelOutputRead()
Close                      Method         void Close()
CloseMainWindow            Method         bool CloseMainWindow()
CreateObjRef               Method         System.Runtime.Remoting.ObjRef CreateOb...
Dispose                    Method         void Dispose(), void IDisposable.Dispose()
Equals                     Method         bool Equals(System.Object obj)
GetHashCode                Method         int GetHashCode()
GetLifetimeService         Method         System.Object GetLifetimeService()
GetType                    Method         type GetType()
InitializeLifetimeService  Method         System.Object InitializeLifetimeService()
Kill                       Method         void Kill()
Refresh                    Method         void Refresh()
Start                      Method         bool Start()
ToString                   Method         string ToString()
WaitForExit                Method         bool WaitForExit(int milliseconds), voi...
WaitForInputIdle           Method         bool WaitForInputIdle(int milliseconds)...
__NounName                 NoteProperty   string __NounName=Process
BasePriority               Property       int BasePriority {get;}
Container                  Property       System.ComponentModel.IContainer Contai...
EnableRaisingEvents        Property       bool EnableRaisingEvents {get;set;}
ExitCode                   Property       int ExitCode {get;}
ExitTime                   Property       datetime ExitTime {get;}
Handle                     Property       System.IntPtr Handle {get;}
HandleCount                Property       int HandleCount {get;}
HasExited                  Property       bool HasExited {get;}
Id                         Property       int Id {get;}
MachineName                Property       string MachineName {get;}
MainModule                 Property       System.Diagnostics.ProcessModule MainMo...
MainWindowHandle           Property       System.IntPtr MainWindowHandle {get;}
MainWindowTitle            Property       string MainWindowTitle {get;}
MaxWorkingSet              Property       System.IntPtr MaxWorkingSet {get;set;}
MinWorkingSet              Property       System.IntPtr MinWorkingSet {get;set;}
Modules                    Property       System.Diagnostics.ProcessModuleCollect...
NonpagedSystemMemorySize   Property       int NonpagedSystemMemorySize {get;}
NonpagedSystemMemorySize64 Property       long NonpagedSystemMemorySize64 {get;}
PagedMemorySize            Property       int PagedMemorySize {get;}
PagedMemorySize64          Property       long PagedMemorySize64 {get;}
PagedSystemMemorySize      Property       int PagedSystemMemorySize {get;}
PagedSystemMemorySize64    Property       long PagedSystemMemorySize64 {get;}
PeakPagedMemorySize        Property       int PeakPagedMemorySize {get;}
PeakPagedMemorySize64      Property       long PeakPagedMemorySize64 {get;}
PeakVirtualMemorySize      Property       int PeakVirtualMemorySize {get;}
PeakVirtualMemorySize64    Property       long PeakVirtualMemorySize64 {get;}
PeakWorkingSet             Property       int PeakWorkingSet {get;}
PeakWorkingSet64           Property       long PeakWorkingSet64 {get;}
PriorityBoostEnabled       Property       bool PriorityBoostEnabled {get;set;}
PriorityClass              Property       System.Diagnostics.ProcessPriorityClass...
PrivateMemorySize          Property       int PrivateMemorySize {get;}
PrivateMemorySize64        Property       long PrivateMemorySize64 {get;}
PrivilegedProcessorTime    Property       timespan PrivilegedProcessorTime {get;}
ProcessName                Property       string ProcessName {get;}
ProcessorAffinity          Property       System.IntPtr ProcessorAffinity {get;set;}
Responding                 Property       bool Responding {get;}
SafeHandle                 Property       Microsoft.Win32.SafeHandles.SafeProcess...
SessionId                  Property       int SessionId {get;}
Site                       Property       System.ComponentModel.ISite Site {get;s...
StandardError              Property       System.IO.StreamReader StandardError {g...
StandardInput              Property       System.IO.StreamWriter StandardInput {g...
StandardOutput             Property       System.IO.StreamReader StandardOutput {...
StartInfo                  Property       System.Diagnostics.ProcessStartInfo Sta...
StartTime                  Property       datetime StartTime {get;}
SynchronizingObject        Property       System.ComponentModel.ISynchronizeInvok...
Threads                    Property       System.Diagnostics.ProcessThreadCollect...
TotalProcessorTime         Property       timespan TotalProcessorTime {get;}
UserProcessorTime          Property       timespan UserProcessorTime {get;}
VirtualMemorySize          Property       int VirtualMemorySize {get;}
VirtualMemorySize64        Property       long VirtualMemorySize64 {get;}
WorkingSet                 Property       int WorkingSet {get;}
WorkingSet64               Property       long WorkingSet64 {get;}
PSConfiguration            PropertySet    PSConfiguration {Name, Id, PriorityClas...
PSResources                PropertySet    PSResources {Name, Id, Handlecount, Wor...
Company                    ScriptProperty System.Object Company {get=$this.Mainmo...
CPU                        ScriptProperty System.Object CPU {get=$this.TotalProce...
Description                ScriptProperty System.Object Description {get=$this.Ma...
FileVersion                ScriptProperty System.Object FileVersion {get=$this.Ma...
Path                       ScriptProperty System.Object Path {get=$this.Mainmodul...
Product                    ScriptProperty System.Object Product {get=$this.Mainmo...
ProductVersion             ScriptProperty System.Object ProductVersion {get=$this...


PS C:\>
PS>start-Transcript -OutputDirectory C:\Users\David\Documents\GitHub\Nuggets
Transcript started, output file is C:\Users\David\Documents\GitHub\Nuggets\PowerShell_transcript.DESKTOP-4L3UJGL.aIeu7pet.20161120185546.txt
PS C:\>
PS>help Start-Transcript -Examples

NAME
    Start-Transcript

SYNOPSIS
    Creates a record of all or part of a Windows PowerShell session to a text file.


    Example 1: Start a transcript file with default settings

    PS C:\>Start-Transcript

    This command starts a transcript in the default file location.
    Example 2: Start a transcript file at a specific location

    PS C:\>Start-Transcript -Path "C:\transcripts\transcript0.txt" -NoClobber

    This command starts a transcript in the Transcript0.txt file in C:\transcripts.
    Since the NoClobber parameter is used, the command prevents any existing files
    from being overwritten. If the Transcript0.txt file already exists, the command
    fails.



PS C:\>
PS>help Start-Transcript -online
PS C:\>
PS>Get-Process | gm


   TypeName: System.Diagnostics.Process

Name                       MemberType     Definition
----                       ----------     ----------
Handles                    AliasProperty  Handles = Handlecount
Name                       AliasProperty  Name = ProcessName
NPM                        AliasProperty  NPM = NonpagedSystemMemorySize64
PM                         AliasProperty  PM = PagedMemorySize64
SI                         AliasProperty  SI = SessionId
VM                         AliasProperty  VM = VirtualMemorySize64
WS                         AliasProperty  WS = WorkingSet64
Disposed                   Event          System.EventHandler Disposed(System.Obj...
ErrorDataReceived          Event          System.Diagnostics.DataReceivedEventHan...
Exited                     Event          System.EventHandler Exited(System.Objec...
OutputDataReceived         Event          System.Diagnostics.DataReceivedEventHan...
BeginErrorReadLine         Method         void BeginErrorReadLine()
BeginOutputReadLine        Method         void BeginOutputReadLine()
CancelErrorRead            Method         void CancelErrorRead()
CancelOutputRead           Method         void CancelOutputRead()
Close                      Method         void Close()
CloseMainWindow            Method         bool CloseMainWindow()
CreateObjRef               Method         System.Runtime.Remoting.ObjRef CreateOb...
Dispose                    Method         void Dispose(), void IDisposable.Dispose()
Equals                     Method         bool Equals(System.Object obj)
GetHashCode                Method         int GetHashCode()
GetLifetimeService         Method         System.Object GetLifetimeService()
GetType                    Method         type GetType()
InitializeLifetimeService  Method         System.Object InitializeLifetimeService()
Kill                       Method         void Kill()
Refresh                    Method         void Refresh()
Start                      Method         bool Start()
ToString                   Method         string ToString()
WaitForExit                Method         bool WaitForExit(int milliseconds), voi...
WaitForInputIdle           Method         bool WaitForInputIdle(int milliseconds)...
__NounName                 NoteProperty   string __NounName=Process
BasePriority               Property       int BasePriority {get;}
Container                  Property       System.ComponentModel.IContainer Contai...
EnableRaisingEvents        Property       bool EnableRaisingEvents {get;set;}
ExitCode                   Property       int ExitCode {get;}
ExitTime                   Property       datetime ExitTime {get;}
Handle                     Property       System.IntPtr Handle {get;}
HandleCount                Property       int HandleCount {get;}
HasExited                  Property       bool HasExited {get;}
Id                         Property       int Id {get;}
MachineName                Property       string MachineName {get;}
MainModule                 Property       System.Diagnostics.ProcessModule MainMo...
MainWindowHandle           Property       System.IntPtr MainWindowHandle {get;}
MainWindowTitle            Property       string MainWindowTitle {get;}
MaxWorkingSet              Property       System.IntPtr MaxWorkingSet {get;set;}
MinWorkingSet              Property       System.IntPtr MinWorkingSet {get;set;}
Modules                    Property       System.Diagnostics.ProcessModuleCollect...
NonpagedSystemMemorySize   Property       int NonpagedSystemMemorySize {get;}
NonpagedSystemMemorySize64 Property       long NonpagedSystemMemorySize64 {get;}
PagedMemorySize            Property       int PagedMemorySize {get;}
PagedMemorySize64          Property       long PagedMemorySize64 {get;}
PagedSystemMemorySize      Property       int PagedSystemMemorySize {get;}
PagedSystemMemorySize64    Property       long PagedSystemMemorySize64 {get;}
PeakPagedMemorySize        Property       int PeakPagedMemorySize {get;}
PeakPagedMemorySize64      Property       long PeakPagedMemorySize64 {get;}
PeakVirtualMemorySize      Property       int PeakVirtualMemorySize {get;}
PeakVirtualMemorySize64    Property       long PeakVirtualMemorySize64 {get;}
PeakWorkingSet             Property       int PeakWorkingSet {get;}
PeakWorkingSet64           Property       long PeakWorkingSet64 {get;}
PriorityBoostEnabled       Property       bool PriorityBoostEnabled {get;set;}
PriorityClass              Property       System.Diagnostics.ProcessPriorityClass...
PrivateMemorySize          Property       int PrivateMemorySize {get;}
PrivateMemorySize64        Property       long PrivateMemorySize64 {get;}
PrivilegedProcessorTime    Property       timespan PrivilegedProcessorTime {get;}
ProcessName                Property       string ProcessName {get;}
ProcessorAffinity          Property       System.IntPtr ProcessorAffinity {get;set;}
Responding                 Property       bool Responding {get;}
SafeHandle                 Property       Microsoft.Win32.SafeHandles.SafeProcess...
SessionId                  Property       int SessionId {get;}
Site                       Property       System.ComponentModel.ISite Site {get;s...
StandardError              Property       System.IO.StreamReader StandardError {g...
StandardInput              Property       System.IO.StreamWriter StandardInput {g...
StandardOutput             Property       System.IO.StreamReader StandardOutput {...
StartInfo                  Property       System.Diagnostics.ProcessStartInfo Sta...
StartTime                  Property       datetime StartTime {get;}
SynchronizingObject        Property       System.ComponentModel.ISynchronizeInvok...
Threads                    Property       System.Diagnostics.ProcessThreadCollect...
TotalProcessorTime         Property       timespan TotalProcessorTime {get;}
UserProcessorTime          Property       timespan UserProcessorTime {get;}
VirtualMemorySize          Property       int VirtualMemorySize {get;}
VirtualMemorySize64        Property       long VirtualMemorySize64 {get;}
WorkingSet                 Property       int WorkingSet {get;}
WorkingSet64               Property       long WorkingSet64 {get;}
PSConfiguration            PropertySet    PSConfiguration {Name, Id, PriorityClas...
PSResources                PropertySet    PSResources {Name, Id, Handlecount, Wor...
Company                    ScriptProperty System.Object Company {get=$this.Mainmo...
CPU                        ScriptProperty System.Object CPU {get=$this.TotalProce...
Description                ScriptProperty System.Object Description {get=$this.Ma...
FileVersion                ScriptProperty System.Object FileVersion {get=$this.Ma...
Path                       ScriptProperty System.Object Path {get=$this.Mainmodul...
Product                    ScriptProperty System.Object Product {get=$this.Mainmo...
ProductVersion             ScriptProperty System.Object ProductVersion {get=$this...


PS C:\>
PS>help Stop-Process -full

NAME
    Stop-Process

SYNOPSIS
    Stops one or more running processes.


SYNTAX
    Stop-Process [-Id] <Int32[]> [-Confirm] [-Force] [-PassThru] [-WhatIf]
    [<CommonParameters>]

    Stop-Process [-InputObject] <Process[]> [-Confirm] [-Force] [-PassThru]
    [-WhatIf] [<CommonParameters>]

    Stop-Process [-Confirm] [-Force] -Name <String[]> [-PassThru] [-WhatIf]
    [<CommonParameters>]


DESCRIPTION
    The Stop-Process cmdlet stops one or more running processes. You can specify a
    process by process name or process ID (PID), or pass a process object to
    Stop-Process . Stop-Process works only on processes running on the local
    computer.

    On Windows Vista and later versions of the Windows operating system, to stop a
    process that is not owned by the current user, you must start Windows
    PowerShell by using the Run as administrator option. Also, you are prompted for
    confirmation unless you specify the Force parameter.


PARAMETERS
    -Confirm [<SwitchParameter>]
        Prompts you for confirmation before running the cmdlet.Prompts you for
        confirmation before running the cmdlet.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Force [<SwitchParameter>]
        Stops the specified processes without prompting for confirmation. By
        default, Stop-Process prompts for confirmation before stopping any process
        that is not owned by the current user.

        To find the owner of a process, use the Get-WmiObject cmdlet to get a
        Win32_Process object that represents the process, and then use the GetOwner
        method of the object.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Id <Int32[]>
        Specifies the process IDs of the processes to stop. To specify multiple
        IDs, use commas to separate the IDs. To find the PID of a process, type
        `Get-Process`.

        Required?                    true
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -InputObject <Process[]>
        Specifies the process objects to stop. Enter a variable that contains the
        objects, or type a command or expression that gets the objects.

        Required?                    true
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies the process names of the processes to stop. You can type multiple
        process names, separated by commas, or use wildcard characters.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -PassThru [<SwitchParameter>]
        Returns an object that represents the process. By default, this cmdlet does
        not generate any output.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -WhatIf [<SwitchParameter>]
        Shows what would happen if the cmdlet runs. The cmdlet is not run.Shows
        what would happen if the cmdlet runs. The cmdlet is not run.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.Diagnostics.Process
        You can pipe a process object to this cmdlet.


OUTPUTS
    None, System.Diagnostics.Process
        This cmdlet returns a System.Diagnostics.Process object that represents the
        stopped process, if you specify the PassThru parameter. Otherwise, this
        cmdlet does not generate any output.


NOTES


        You can also refer to Stop-Process by its built-in aliases, kill and spps
        *. For more information, see about_Aliases.

        You can also use the properties and methods of the Windows Management
        Instrumentation (WMI) Win32_Process object in Windows PowerShell. For more
        information, see Get-WmiObject and the WMI SDK.

        When stopping processes, realize that stopping a process can stop process
        and services that depend on the process. In an extreme case, stopping a
        process can stop Windows.

        *

    Example 1: Stop all instances of a process

    PS C:\>Stop-Process -Name "notepad"

    This command stops all instances of the Notepad process on the computer. Each
    instance of Notepad runs in its own process. It uses the Name parameter to
    specify the processes, all of which have the same name. If you were to use the
    Id parameter to stop the same processes, you would have to list the process IDs
    of each instance of Notepad.
    Example 2: Stop a specific instance of a process

    PS C:\>Stop-Process -Id 3952 -Confirm -PassThru
    Confirm
    Are you sure you want to perform this action?
    Performing operation "Stop-Process" on Target "notepad (3952)".
    [Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
    (default is "Y"):y
    Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
    -------  ------    -----      ----- -----   ------     -- -----------
    41       2      996       3212    31            3952 notepad

    This command stops a particular instance of the Notepad process. It uses the
    process ID, 3952, to identify the process. The Confirm parameter directs
    Windows PowerShell to prompt you before it stops the process. Because the
    prompt includes the process namein addition to its ID, this is best practice.
    The PassThru parameter passes the process object to the formatter for display.
    Without this parameter, there would be no display after a Stop-Process command.
    Example 3: Stop a process and detect that it has stopped

    PS C:\>calc
    PS C:\> $p = Get-Crocess -Name "calc"
    PS C:\> Stop-Process -InputObject $p
    PS C:\> Get-Process | Where-Object {$_.HasExited}

    This series of commands starts and stops the Calc process, and then detects
    processes that have stopped.

    The first command starts an instance of the calculator.

    The second command uses Get-Process gets an object that represents the Calc
    process, and then stores it in the $p variable.

    The third command stops the Calc process. It uses the InputObject parameter to
    pass the object to Stop-Process .

    The last command gets all of the processes on the computer that were running
    but that are now stopped. It uses Get-Process to get all of the processes on
    the computer. The pipeline operator (|) passes the results to the Where-Object
    cmdlet, which selects the ones where the value of the HasExited property is
    $True. HasExited is just one property of process objects. To find all the
    properties, type `Get-Process | Get-Member`.
    Example 4: Stop a process not owned by the current user

    PS C:\>Get-Process -Name "lsass" | Stop-Process

    Stop-Process : Cannot stop process 'lsass (596)' because of the following
    error: Access is denied
    At line:1 char:34
    + Get-Process -Name "lsass" | Stop-Process <<<<

    [ADMIN]: PS C:\> Get-Process -Name "lsass" | Stop-Process

    Warning!
    Are you sure you want to perform this action?
    Performing operation 'Stop-Process' on Target 'lsass(596)'
    [Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default
    is "Y"):
    [ADMIN]: PS C:\> Get-Process -Name "lsass" | Stop-Process -Force
    [ADMIN]: PS C:\>

    These commands show the effect of using Force to stop a process that is not
    owned by the user.

    The first command uses Get-Process to get the Lsass process. A pipeline
    operator sends the process to Stop-Process to stop it. As shown in the sample
    output, the first command fails with an Access denied message, because this
    process can be stopped only by a member of the Administrator group on the
    computer.

    When Windows PowerShell is opened by using the Run as administrator option, and
    the command is repeated, Windows PowerShell prompts you for confirmation.

    The second command specifies Force to suppress the prompt. As a result, the
    process is stopped without confirmation.

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821642
    Debug-Process
    Get-Process
    Start-Process
    Stop-Process
    Wait-Process



PS C:\>
PS>Get-Service | GM


   TypeName: System.ServiceProcess.ServiceController

Name                      MemberType    Definition
----                      ----------    ----------
Name                      AliasProperty Name = ServiceName
RequiredServices          AliasProperty RequiredServices = ServicesDependedOn
Disposed                  Event         System.EventHandler Disposed(System.Objec...
Close                     Method        void Close()
Continue                  Method        void Continue()
CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjR...
Dispose                   Method        void Dispose(), void IDisposable.Dispose()
Equals                    Method        bool Equals(System.Object obj)
ExecuteCommand            Method        void ExecuteCommand(int command)
GetHashCode               Method        int GetHashCode()
GetLifetimeService        Method        System.Object GetLifetimeService()
GetType                   Method        type GetType()
InitializeLifetimeService Method        System.Object InitializeLifetimeService()
Pause                     Method        void Pause()
Refresh                   Method        void Refresh()
Start                     Method        void Start(), void Start(string[] args)
Stop                      Method        void Stop()
WaitForStatus             Method        void WaitForStatus(System.ServiceProcess....
CanPauseAndContinue       Property      bool CanPauseAndContinue {get;}
CanShutdown               Property      bool CanShutdown {get;}
CanStop                   Property      bool CanStop {get;}
Container                 Property      System.ComponentModel.IContainer Containe...
DependentServices         Property      System.ServiceProcess.ServiceController[]...
DisplayName               Property      string DisplayName {get;set;}
MachineName               Property      string MachineName {get;set;}
ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle...
ServiceName               Property      string ServiceName {get;set;}
ServicesDependedOn        Property      System.ServiceProcess.ServiceController[]...
ServiceType               Property      System.ServiceProcess.ServiceType Service...
Site                      Property      System.ComponentModel.ISite Site {get;set;}
StartType                 Property      System.ServiceProcess.ServiceStartMode St...
Status                    Property      System.ServiceProcess.ServiceControllerSt...
ToString                  ScriptMethod  System.Object ToString();


PS C:\>
PS>help Stop-Process -full

NAME
    Stop-Process

SYNOPSIS
    Stops one or more running processes.


SYNTAX
    Stop-Process [-Id] <Int32[]> [-Confirm] [-Force] [-PassThru] [-WhatIf]
    [<CommonParameters>]

    Stop-Process [-InputObject] <Process[]> [-Confirm] [-Force] [-PassThru]
    [-WhatIf] [<CommonParameters>]

    Stop-Process [-Confirm] [-Force] -Name <String[]> [-PassThru] [-WhatIf]
    [<CommonParameters>]


DESCRIPTION
    The Stop-Process cmdlet stops one or more running processes. You can specify a
    process by process name or process ID (PID), or pass a process object to
    Stop-Process . Stop-Process works only on processes running on the local
    computer.

    On Windows Vista and later versions of the Windows operating system, to stop a
    process that is not owned by the current user, you must start Windows
    PowerShell by using the Run as administrator option. Also, you are prompted for
    confirmation unless you specify the Force parameter.


PARAMETERS
    -Confirm [<SwitchParameter>]
        Prompts you for confirmation before running the cmdlet.Prompts you for
        confirmation before running the cmdlet.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Force [<SwitchParameter>]
        Stops the specified processes without prompting for confirmation. By
        default, Stop-Process prompts for confirmation before stopping any process
        that is not owned by the current user.

        To find the owner of a process, use the Get-WmiObject cmdlet to get a
        Win32_Process object that represents the process, and then use the GetOwner
        method of the object.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Id <Int32[]>
        Specifies the process IDs of the processes to stop. To specify multiple
        IDs, use commas to separate the IDs. To find the PID of a process, type
        `Get-Process`.

        Required?                    true
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -InputObject <Process[]>
        Specifies the process objects to stop. Enter a variable that contains the
        objects, or type a command or expression that gets the objects.

        Required?                    true
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies the process names of the processes to stop. You can type multiple
        process names, separated by commas, or use wildcard characters.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -PassThru [<SwitchParameter>]
        Returns an object that represents the process. By default, this cmdlet does
        not generate any output.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -WhatIf [<SwitchParameter>]
        Shows what would happen if the cmdlet runs. The cmdlet is not run.Shows
        what would happen if the cmdlet runs. The cmdlet is not run.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.Diagnostics.Process
        You can pipe a process object to this cmdlet.


OUTPUTS
    None, System.Diagnostics.Process
        This cmdlet returns a System.Diagnostics.Process object that represents the
        stopped process, if you specify the PassThru parameter. Otherwise, this
        cmdlet does not generate any output.


NOTES


        You can also refer to Stop-Process by its built-in aliases, kill and spps
        *. For more information, see about_Aliases.

        You can also use the properties and methods of the Windows Management
        Instrumentation (WMI) Win32_Process object in Windows PowerShell. For more
        information, see Get-WmiObject and the WMI SDK.

        When stopping processes, realize that stopping a process can stop process
        and services that depend on the process. In an extreme case, stopping a
        process can stop Windows.

        *

    Example 1: Stop all instances of a process

    PS C:\>Stop-Process -Name "notepad"

    This command stops all instances of the Notepad process on the computer. Each
    instance of Notepad runs in its own process. It uses the Name parameter to
    specify the processes, all of which have the same name. If you were to use the
    Id parameter to stop the same processes, you would have to list the process IDs
    of each instance of Notepad.
    Example 2: Stop a specific instance of a process

    PS C:\>Stop-Process -Id 3952 -Confirm -PassThru
    Confirm
    Are you sure you want to perform this action?
    Performing operation "Stop-Process" on Target "notepad (3952)".
    [Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
    (default is "Y"):y
    Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
    -------  ------    -----      ----- -----   ------     -- -----------
    41       2      996       3212    31            3952 notepad

    This command stops a particular instance of the Notepad process. It uses the
    process ID, 3952, to identify the process. The Confirm parameter directs
    Windows PowerShell to prompt you before it stops the process. Because the
    prompt includes the process namein addition to its ID, this is best practice.
    The PassThru parameter passes the process object to the formatter for display.
    Without this parameter, there would be no display after a Stop-Process command.
    Example 3: Stop a process and detect that it has stopped

    PS C:\>calc
    PS C:\> $p = Get-Crocess -Name "calc"
    PS C:\> Stop-Process -InputObject $p
    PS C:\> Get-Process | Where-Object {$_.HasExited}

    This series of commands starts and stops the Calc process, and then detects
    processes that have stopped.

    The first command starts an instance of the calculator.

    The second command uses Get-Process gets an object that represents the Calc
    process, and then stores it in the $p variable.

    The third command stops the Calc process. It uses the InputObject parameter to
    pass the object to Stop-Process .

    The last command gets all of the processes on the computer that were running
    but that are now stopped. It uses Get-Process to get all of the processes on
    the computer. The pipeline operator (|) passes the results to the Where-Object
    cmdlet, which selects the ones where the value of the HasExited property is
    $True. HasExited is just one property of process objects. To find all the
    properties, type `Get-Process | Get-Member`.
    Example 4: Stop a process not owned by the current user

    PS C:\>Get-Process -Name "lsass" | Stop-Process

    Stop-Process : Cannot stop process 'lsass (596)' because of the following
    error: Access is denied
    At line:1 char:34
    + Get-Process -Name "lsass" | Stop-Process <<<<

    [ADMIN]: PS C:\> Get-Process -Name "lsass" | Stop-Process

    Warning!
    Are you sure you want to perform this action?
    Performing operation 'Stop-Process' on Target 'lsass(596)'
    [Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default
    is "Y"):
    [ADMIN]: PS C:\> Get-Process -Name "lsass" | Stop-Process -Force
    [ADMIN]: PS C:\>

    These commands show the effect of using Force to stop a process that is not
    owned by the user.

    The first command uses Get-Process to get the Lsass process. A pipeline
    operator sends the process to Stop-Process to stop it. As shown in the sample
    output, the first command fails with an Access denied message, because this
    process can be stopped only by a member of the Administrator group on the
    computer.

    When Windows PowerShell is opened by using the Run as administrator option, and
    the command is repeated, Windows PowerShell prompts you for confirmation.

    The second command specifies Force to suppress the prompt. As a result, the
    process is stopped without confirmation.

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821642
    Debug-Process
    Get-Process
    Start-Process
    Stop-Process
    Wait-Process



PS C:\>
PS>Get-Service | GM *property
PS C:\>
PS>Get-Service | GM -MemberType *property


   TypeName: System.ServiceProcess.ServiceController

Name                MemberType    Definition
----                ----------    ----------
Name                AliasProperty Name = ServiceName
RequiredServices    AliasProperty RequiredServices = ServicesDependedOn
CanPauseAndContinue Property      bool CanPauseAndContinue {get;}
CanShutdown         Property      bool CanShutdown {get;}
CanStop             Property      bool CanStop {get;}
Container           Property      System.ComponentModel.IContainer Container {get;}
DependentServices   Property      System.ServiceProcess.ServiceController[] Depen...
DisplayName         Property      string DisplayName {get;set;}
MachineName         Property      string MachineName {get;set;}
ServiceHandle       Property      System.Runtime.InteropServices.SafeHandle Servi...
ServiceName         Property      string ServiceName {get;set;}
ServicesDependedOn  Property      System.ServiceProcess.ServiceController[] Servi...
ServiceType         Property      System.ServiceProcess.ServiceType ServiceType {...
Site                Property      System.ComponentModel.ISite Site {get;set;}
StartType           Property      System.ServiceProcess.ServiceStartMode StartTyp...
Status              Property      System.ServiceProcess.ServiceControllerStatus S...


PS C:\>
PS>Get-Service | Stop-Process -WhatIf
Stop-Process : Cannot find a process with the name "AJRouter". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AJRouter:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AJRouter". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AJRouter:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "ALG". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ALG:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "ALG". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ALG:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "AppIDSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppIDSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AppIDSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppIDSvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Appinfo". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Appinfo:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Appinfo". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Appinfo:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Apple Mobile Device Service". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Apple Mobile Device Service:String) [Stop-Process], 
ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Apple Mobile Device Service".
Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Apple Mobile Device Service:String)
   [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "AppReadiness". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppReadiness:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AppReadiness". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppReadiness:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "AppXSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppXSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AppXSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AppXSvc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "AudioEndpointBuilder". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AudioEndpointBuilder:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AudioEndpointBuilder". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AudioEndpointBuilder:String) [Stop-P
   rocess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Audiosrv". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Audiosrv:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Audiosrv". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Audiosrv:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "AxInstSV". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AxInstSV:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "AxInstSV". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AxInstSV:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "BDESVC". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BDESVC:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "BDESVC". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BDESVC:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "BFE". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BFE:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "BFE". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BFE:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "BITS". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BITS:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "BITS". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BITS:String) [Stop-Process], Process
   CommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Bonjour Service". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Bonjour Service:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Bonjour Service". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Bonjour Service:String) [Stop-Proces
   s], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "BrokerInfrastructure". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BrokerInfrastructure:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "BrokerInfrastructure". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BrokerInfrastructure:String) [Stop-P
   rocess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Browser". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Browser:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Browser". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Browser:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "BthHFSrv". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BthHFSrv:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "BthHFSrv". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (BthHFSrv:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "bthserv". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (bthserv:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "bthserv". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (bthserv:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "CDPSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CDPSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "CDPSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CDPSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "CDPUserSvc_644a0". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CDPUserSvc_644a0:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "CDPUserSvc_644a0". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CDPUserSvc_644a0:String) [Stop-Proce
   ss], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "CertPropSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CertPropSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "CertPropSvc". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CertPropSvc:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "ClipSVC". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ClipSVC:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "ClipSVC". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ClipSVC:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "COMSysApp". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (COMSysApp:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "COMSysApp". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (COMSysApp:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "CoreMessagingRegistrar". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CoreMessagingRegistrar:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "CoreMessagingRegistrar". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CoreMessagingRegistrar:String) [Stop
   -Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "cphs". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cphs:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "cphs". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cphs:String) [Stop-Process], Process
   CommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "cplspcon". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cplspcon:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "cplspcon". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (cplspcon:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "CryptSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CryptSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "CryptSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (CryptSvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "dbupdate". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dbupdate:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "dbupdate". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dbupdate:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "dbupdatem". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dbupdatem:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "dbupdatem". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dbupdatem:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DcomLaunch". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DcomLaunch:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DcomLaunch". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DcomLaunch:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DcpSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DcpSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DcpSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DcpSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "defragsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (defragsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "defragsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (defragsvc:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DeviceAssociationService". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DeviceAssociationService:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DeviceAssociationService".
Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DeviceAssociationService:String) [St
   op-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DeviceInstall". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DeviceInstall:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DeviceInstall". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DeviceInstall:String) [Stop-Process]
   , ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DevQueryBroker". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DevQueryBroker:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DevQueryBroker". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DevQueryBroker:String) [Stop-Process
   ], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Dhcp". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Dhcp:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Dhcp". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Dhcp:String) [Stop-Process], Process
   CommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "diagnosticshub.standardcollector.service". Verify the process name 
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (diagnosticshub.standardcollector.service:String) [Stop-Process], 
ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name
"diagnosticshub.standardcollector.service". Verify the process name and call the
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (diagnosticshub.standardcollector.ser
   vice:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DiagTrack". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DiagTrack:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DiagTrack". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DiagTrack:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DmEnrollmentSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DmEnrollmentSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DmEnrollmentSvc". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DmEnrollmentSvc:String) [Stop-Proces
   s], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "dmwappushservice". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dmwappushservice:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "dmwappushservice". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dmwappushservice:String) [Stop-Proce
   ss], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Dnscache". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Dnscache:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Dnscache". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Dnscache:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DoSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DoSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DoSvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DoSvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "dot3svc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dot3svc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "dot3svc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (dot3svc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DPS". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DPS:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DPS". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DPS:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DsmSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DsmSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DsmSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DsmSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "DsSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DsSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "DsSvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (DsSvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "EapHost". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EapHost:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "EapHost". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EapHost:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "EFS". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EFS:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "EFS". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EFS:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "embeddedmode". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (embeddedmode:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "embeddedmode". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (embeddedmode:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "EntAppSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EntAppSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "EntAppSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EntAppSvc:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "esifsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (esifsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "esifsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (esifsvc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "EventLog". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EventLog:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "EventLog". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EventLog:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "EventSystem". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EventSystem:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "EventSystem". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (EventSystem:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "EvtEng (2456)".
Stop-Process : Cannot find a process with the name "Fax". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Fax:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Fax". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Fax:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "fdPHost". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (fdPHost:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "fdPHost". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (fdPHost:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "FDResPub". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FDResPub:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "FDResPub". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FDResPub:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "fhsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (fhsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "fhsvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (fhsvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "FontCache". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FontCache:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "FontCache". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FontCache:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "FontCache3.0.0.0". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FontCache3.0.0.0:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "FontCache3.0.0.0". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FontCache3.0.0.0:String) [Stop-Proce
   ss], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "FrameServer". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FrameServer:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "FrameServer". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (FrameServer:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "gpsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (gpsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "gpsvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (gpsvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "hidserv". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (hidserv:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "hidserv". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (hidserv:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "HomeGroupListener". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeGroupListener:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "HomeGroupListener". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeGroupListener:String) [Stop-Proc
   ess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "HomeGroupProvider". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeGroupProvider:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "HomeGroupProvider". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeGroupProvider:String) [Stop-Proc
   ess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "HomeNetSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeNetSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "HomeNetSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HomeNetSvc:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "HvHost". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HvHost:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "HvHost". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (HvHost:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "ibtsiva (2388)".
Stop-Process : Cannot find a process with the name "icssvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (icssvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "icssvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (icssvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "igfxCUIService2.0.0.0". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (igfxCUIService2.0.0.0:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "igfxCUIService2.0.0.0". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (igfxCUIService2.0.0.0:String) [Stop-
   Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "IKEEXT". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (IKEEXT:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "IKEEXT". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (IKEEXT:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Intel(R) Capability Licensing Service TCP IP Interface". Verify the 
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) Capabi...CP IP Interface:String) [Stop-Process], 
ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Intel(R) Capability Licensing
Service TCP IP Interface". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) Capabi...CP IP Interface:St
   ring) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Intel(R) Security Assist". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) Security Assist:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Intel(R) Security Assist".
Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) Security Assist:String) [St
   op-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Intel(R) WiDi SAM". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) WiDi SAM:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Intel(R) WiDi SAM". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Intel(R) WiDi SAM:String) [Stop-Proc
   ess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "iphlpsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (iphlpsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "iphlpsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (iphlpsvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "iPod Service". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (iPod Service:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "iPod Service". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (iPod Service:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "irmon". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (irmon:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "irmon". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (irmon:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "isaHelperSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (isaHelperSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "isaHelperSvc". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (isaHelperSvc:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "jhi_service (392)".
Stop-Process : Cannot find a process with the name "KeyIso". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (KeyIso:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "KeyIso". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (KeyIso:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "KtmRm". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (KtmRm:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "KtmRm". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (KtmRm:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "LanmanServer". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LanmanServer:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "LanmanServer". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LanmanServer:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "LanmanWorkstation". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LanmanWorkstation:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "LanmanWorkstation". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LanmanWorkstation:String) [Stop-Proc
   ess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "lfsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lfsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "lfsvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lfsvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "LicenseManager". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LicenseManager:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "LicenseManager". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LicenseManager:String) [Stop-Process
   ], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "lltdsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lltdsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "lltdsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lltdsvc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "lmhosts". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lmhosts:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "lmhosts". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (lmhosts:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "LMS (7988)".
Stop-Process : Cannot find a process with the name "LSM". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LSM:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "LSM". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (LSM:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MapsBroker". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MapsBroker:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MapsBroker". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MapsBroker:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "McAPExe (6544)".
Stop-Process : Cannot find a process with the name "McBootDelayStartSvc". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McBootDelayStartSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "McBootDelayStartSvc". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McBootDelayStartSvc:String) [Stop-Pr
   ocess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "mccspsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mccspsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "mccspsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mccspsvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "McMPFSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McMPFSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "McMPFSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McMPFSvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "McNaiAnn". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McNaiAnn:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "McNaiAnn". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McNaiAnn:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "McODS". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McODS:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "McODS". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McODS:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "mcpltsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mcpltsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "mcpltsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mcpltsvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "McProxy". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McProxy:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "McProxy". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (McProxy:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MessagingService_644a0". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MessagingService_644a0:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MessagingService_644a0". Verify
the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MessagingService_644a0:String) [Stop
   -Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "mfefire (3384)".
What if: Performing the operation "Stop-Process" on target "mfefire (3640)".
What if: Performing the operation "Stop-Process" on target "mfemms (2672)".
Stop-Process : Cannot find a process with the name "mfevtp". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mfevtp:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "mfevtp". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (mfevtp:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "ModuleCoreService (5580)".
Stop-Process : Cannot find a process with the name "MozillaMaintenance". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MozillaMaintenance:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MozillaMaintenance". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MozillaMaintenance:String) [Stop-Pro
   cess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MpsSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MpsSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MpsSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MpsSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MSDTC". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSDTC:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MSDTC". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSDTC:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MSiSCSI". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSiSCSI:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MSiSCSI". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSiSCSI:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "msiserver". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (msiserver:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "msiserver". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (msiserver:String) [Stop-Process], Pr
   ocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MSK80Service". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSK80Service:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MSK80Service". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MSK80Service:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "MyWiFiDHCPDNS". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MyWiFiDHCPDNS:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "MyWiFiDHCPDNS". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MyWiFiDHCPDNS:String) [Stop-Process]
   , ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NcaSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcaSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NcaSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcaSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NcbService". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcbService:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NcbService". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcbService:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NcdAutoSetup". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcdAutoSetup:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NcdAutoSetup". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NcdAutoSetup:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Netlogon". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Netlogon:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Netlogon". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Netlogon:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Netman". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Netman:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Netman". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Netman:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "netprofm". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (netprofm:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "netprofm". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (netprofm:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NetSetupSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NetSetupSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NetSetupSvc". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NetSetupSvc:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NetTcpPortSharing". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NetTcpPortSharing:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NetTcpPortSharing". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NetTcpPortSharing:String) [Stop-Proc
   ess], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NgcCtnrSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NgcCtnrSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NgcCtnrSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NgcCtnrSvc:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NgcSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NgcSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NgcSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NgcSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "NlaSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NlaSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "NlaSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (NlaSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "nsi". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (nsi:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "nsi". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (nsi:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "OneSyncSvc_644a0". Verify the process name and call the cmdlet 
again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (OneSyncSvc_644a0:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "OneSyncSvc_644a0". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (OneSyncSvc_644a0:String) [Stop-Proce
   ss], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "p2pimsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (p2pimsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "p2pimsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (p2pimsvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "p2psvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (p2psvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "p2psvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (p2psvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PcaSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PcaSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PcaSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PcaSvc:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "PEFService (2680)".
Stop-Process : Cannot find a process with the name "PerfHost". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PerfHost:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PerfHost". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PerfHost:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PhoneSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PhoneSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PhoneSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PhoneSvc:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PimIndexMaintenanceSvc_644a0". Verify the process name and call the 
cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PimIndexMaintenanceSvc_644a0:String) [Stop-Process], 
ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PimIndexMaintenanceSvc_644a0".
Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PimIndexMaintenanceSvc_644a0:String)
    [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "pla". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (pla:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "pla". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (pla:String) [Stop-Process], ProcessC
   ommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PlugPlay". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PlugPlay:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PlugPlay". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PlugPlay:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PNRPAutoReg". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PNRPAutoReg:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PNRPAutoReg". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PNRPAutoReg:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PNRPsvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PNRPsvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PNRPsvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PNRPsvc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PolicyAgent". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PolicyAgent:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PolicyAgent". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PolicyAgent:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "Power". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Power:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "Power". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Power:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "PrintNotify". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PrintNotify:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "PrintNotify". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PrintNotify:String) [Stop-Process],
   ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "ProfSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ProfSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "ProfSvc". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ProfSvc:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "QWAVE". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (QWAVE:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "QWAVE". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (QWAVE:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RasAuto". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RasAuto:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RasAuto". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RasAuto:String) [Stop-Process], Proc
   essCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RasMan". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RasMan:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RasMan". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RasMan:String) [Stop-Process], Proce
   ssCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

What if: Performing the operation "Stop-Process" on target "RegSrvc (2664)".
Stop-Process : Cannot find a process with the name "RemoteAccess". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RemoteAccess:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RemoteAccess". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RemoteAccess:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RemoteRegistry". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RemoteRegistry:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RemoteRegistry". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RemoteRegistry:String) [Stop-Process
   ], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RetailDemo". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RetailDemo:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RetailDemo". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RetailDemo:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RmSvc". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RmSvc:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RmSvc". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RmSvc:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RpcEptMapper". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcEptMapper:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RpcEptMapper". Verify the
process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcEptMapper:String) [Stop-Process],
    ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RpcLocator". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcLocator:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RpcLocator". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcLocator:String) [Stop-Process], P
   rocessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "RpcSs". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcSs:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "RpcSs". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (RpcSs:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "SamSs". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (SamSs:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "SamSs". Verify the process name
and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (SamSs:String) [Stop-Process], Proces
   sCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "SCardSvr". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (SCardSvr:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
Stop-Process : Cannot find a process with the name "SCardSvr". Verify the process
name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (SCardSvr:String) [Stop-Process], Pro
   cessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Comma
   nds.StopProcessCommand

Stop-Process : Cannot find a process with the name "ScDeviceEnum". Verify the process name and call the cmdlet again.
At line:1 char:15
+ Get-Service | Stop-Process -WhatIf
+               ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (ScDeviceEnum:String) [Stop-Process], ProcessCommandException
    + FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.Commands.StopProcessCommand
>> TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS C:\>
PS>help Get-Process -Full

NAME
    Get-Process

SYNOPSIS
    Gets the processes that are running on the local computer or a remote computer.


SYNTAX
    Get-Process [[-Name] <String[]>] [-ComputerName <String[]>] [-FileVersionInfo]
    [-Module] [<CommonParameters>]

    Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -Id <Int32[]>
    [-Module] [<CommonParameters>]

    Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -InputObject
    <Process[]> [-Module] [<CommonParameters>]

    Get-Process -Id <Int32[]> -IncludeUserName [<CommonParameters>]

    Get-Process [[-Name] <String[]>] -IncludeUserName [<CommonParameters>]

    Get-Process -IncludeUserName -InputObject <Process[]> [<CommonParameters>]


DESCRIPTION
    The Get-Process cmdlet gets the processes on a local or remote computer.

    Without parameters, this cmdlet gets all of the processes on the local
    computer. You can also specify a particular process by process name or process
    ID (PID) or pass a process object through the pipeline to this cmdlet.

    By default, this cmdlet returns a process object that has detailed information
    about the process and supports methods that let you start and stop the process.
    You can also use the parameters of the Get-Process cmdlet to get file version
    information for the program that runs in the process and to get the modules
    that the process loaded.


PARAMETERS
    -ComputerName <String[]>
        Specifies the computers for which this cmdlet gets active processes. The
        default is the local computer.

        Type the NetBIOS name, an IP address, or a fully qualified domain name
        (FQDN) of one or more computers. To specify the local computer, type the
        computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use
        the ComputerName parameter of this cmdlet even if your computer is not
        configured to run remote commands.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -FileVersionInfo [<SwitchParameter>]
        Indicates that this cmdlet gets the file version information for the
        program that runs in the process.

        On Windows Vista and later versions of Windows, you must open Windows
        PowerShell with the Run as administrator option to use this parameter on
        processes that you do not own.

        You cannot use the FileVersionInfo and ComputerName parameters of the
        Get-Process cmdlet in the same command. To get file version information for
        a process on a remote computer, use the Invoke-Command cmdlet.

        Using this parameter is equivalent to getting the
        MainModule.FileVersionInfo property of each process object. When you use
        this parameter, Get-Process returns a FileVersionInfo object
        (System.Diagnostics.FileVersionInfo), not a process object. So, you cannot
        pipe the output of the command to a cmdlet that expects a process object,
        such as Stop-Process.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Id <Int32[]>
        Specifies one or more processes by process ID (PID). To specify multiple
        IDs, use commas to separate the IDs. To find the PID of a process, type
        `Get-Process`.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -IncludeUserName [<SwitchParameter>]
        Indicates that the UserName value of the Process object is returned with
        results of the command.

        Required?                    true
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -InputObject <Process[]>
        Specifies one or more process objects. Enter a variable that contains the
        objects, or type a command or expression that gets the objects.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Module [<SwitchParameter>]
        Indicates that this cmdlet gets the modules that have been loaded by the
        processes.

        On Windows Vista and later versions of Windows, you must open Windows
        PowerShell with the Run as administrator option to use this parameter on
        processes that you do not own.

        You cannot use the Module and ComputerName parameters of the Get-Process
        cmdlet in the same command. To get the modules that have been loaded by a
        process on a remote computer, use the Invoke-Command cmdlet.

        This parameter is equivalent to getting the Modules property of each
        process object. When you use this parameter, this cmdlet returns a
        ProcessModule object (System.Diagnostics.ProcessModule), not a process
        object. So, you cannot pipe the output of the command to a cmdlet that
        expects a process object, such as Stop-Process.

        When you use both the Module and FileVersionInfo parameters in the same
        command, this cmdlet returns a FileVersionInfo object with information
        about the file version of all modules.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies one or more processes by process name. You can type multiple
        process names (separated by commas) and use wildcard characters. The
        parameter name ("Name") is optional.

        Required?                    false
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.Diagnostics.Process
        You can pipe a process object to this cmdlet.


OUTPUTS
    System.Diagnostics.Process, System.Diagnotics.FileVersionInfo,
    System.Diagnostics.ProcessModule
        By default, this cmdlet returns a System.Diagnostics.Process object. If you
        use the FileVersionInfo parameter, it returns a
        System.Diagnotics.FileVersionInfo object.  If you use the Module parameter,
        without the FileVersionInfo parameter, it returns a
        System.Diagnostics.ProcessModule object.


NOTES


        * You can also refer to this cmdlet by its built-in aliases, ps and gps.
        For more information, see about_Aliases.

        * On computers that are running a 64-bit version of Windows, the 64-bit
        version of Windows PowerShell gets only 64-bit process modules and the
        32-bit version of Windows PowerShell gets only 32-bit process modules.

        * You can use the properties and methods of the Windows Management
        Instrumentation (WMI) Win32_Process object in Windows PowerShell. For
        information, see Get-WmiObject and the WMI SDK.

        * The default display of a process is a table that includes the following
        columns. For a description of all of the properties of process objects, see
        Process Propertieshttp://go.microsoft.com/fwlink/?LinkId=204482 at
        http://go.microsoft.com/fwlink/?LinkId=204482.


        - Handles: The number of handles that the process has opened.

        - NPM(K): The amount of non-paged memory that the process is using, in
        kilobytes.

        - PM(K): The amount of pageable memory that the process is using, in
        kilobytes.

        - WS(K): The size of the working set of the process, in kilobytes. The
        working set consists of the pages of memory that were recently referenced
        by the process.

        - VM(M): The amount of virtual memory that the process is using, in
        megabytes. Virtual memory includes storage in the paging files on disk.

        - CPU(s): The amount of processor time that the process has used on all
        processors, in seconds.

        - ID: The process ID (PID) of the process.

        - ProcessName: The name of the process.

        For explanations of the concepts related to processes, see the Glossary in
        Help and Support Center and the Help for Task Manager.
        * You can also use the built-in alternate views of the processes available
        with Format-Table, such as StartTime and Priority, and you can design your
        own views.


    Example 1: Get a list of all active processes on the local computer

    PS C:\>Get-Process

    This command gets a list of all active processes running on the local computer.
    For a definition of each column, see the "Additional Notes" section of the Help
    topic for Get-Help.
    Example 2: Get all available data about one or more processes

    PS C:\>Get-Process winword, explorer | Format-List *

    This command gets all available data about the Winword and Explorer processes
    on the computer. It uses the Name parameter to specify the processes, but it
    omits the optional parameter name. The pipeline operator (|) passes the data to
    the Format-List cmdlet, which displays all available properties (*) of the
    Winword and Explorer process objects.

    You can also identify the processes by their process IDs. For instance,
    `Get-Process -Id 664, 2060`.
    Example 3: Get all processes with a working set greater than a specified size

    PS C:\>Get-Process | Where-Object {$_.WorkingSet -gt 20000000}

    This command gets all processes that have a working set greater than 20 MB. It
    uses the Get-Process cmdlet to get all running processes. The pipeline operator
    (|) passes the process objects to the Where-Object cmdlet, which selects only
    the object with a value greater than 20,000,000 bytes for the WorkingSet
    property. WorkingSet is one of many properties of process objects. To see all
    of the properties, type `Get-Process | Get-Member`. By default, the values of
    all amount properties are in bytes, even though the default display lists them
    in kilobytes and megabytes.
    Example 4: List processes on the computer in groups based on priority

    PS C:\>$A = Get-Process PS C:\>Get-Process -InputObject $A | Format-Table -View
    priority

    These commands list the processes on the computer in groups based on their
    priority class. The first command gets all the processes on the computer and
    then stores them in the $A variable.

    The second command uses the InputObject parameter to pass the process objects
    that are stored in the $A variable to the Get-Process cmdlet. The pipeline
    operator passes the objects to the Format-Table cmdlet, which formats the
    processes by using the Priority view. The Priority view, and other views, are
    defined in the PS1XML format files in the Windows PowerShell home directory
    ($pshome).
    Example 5: Add a property to the standard Get-Process output display

    PS C:\>Get-Process Powershell -ComputerName S1, localhost | ft
    @{Label="NPM(K)";Expression={[int]($_.NPM/1024)}}, @{Label="PM(K)";Expression={[
    int]($_.PM/1024)}},@{Label="WS(K)";Expression={[int]($_.WS/1024)}},@{Label="VM(M
    )";Expression={[int]($_.VM/1MB)}}, @{Label="CPU(s)";Expression={if ($_.CPU -ne
    $()) { $_.CPU.ToString("N")}}}, Id, MachineName, ProcessName -Auto






    NPM(K) PM(K) WS(K) VM(M) CPU(s)   Id MachineName ProcessName
    ------ ----- ----- ----- ------   -- ----------- -----------
    6      23500 31340   142        1980 S1          powershell
    6      23500 31348   142        4016 S1          powershell
    27     54572 54520   576        4428 localhost   powershell

    This example provides a Format-Table (alias = ft) command that adds the
    MachineName property to the standard Get-Process output display.
    Example 6: Get version information for a process

    PS C:\>Get-Process powershell -FileVersionInfo




    ProductVersion   FileVersion      FileName
    --------------   -----------      --------
    6.1.6713.1       6.1.6713.1 (f...
    C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe

    This command uses the FileVersionInfo parameter to get the version information
    for the PowerShell.exe file that is the main module for the PowerShell process.

    To run this command with processes that you do not own on Windows Vista and
    later versions of Windows, you must open Windows PowerShell with the Run as
    administrator option.
    Example 7: Get modules loaded with the specified process

    PS C:\>Get-Process SQL* -Module

    This command uses the Module parameter to get the modules that have been loaded
    by the process. This command gets the modules for the processes that have names
    that begin with SQL.

    To run this command on Windows Vista and later versions of Windows with
    processes that you do not own, you must start Windows PowerShell with the Run
    as administrator option.
    Example 8: Find the owner of a process

    PS C:\>$P = Get-WmiObject win32_process -Filter "name='powershell.exe'"
    PS C:\>$P.getowner()














    __GENUS          : 2
    __CLASS          : __PARAMETERS
    __SUPERCLASS     :
    __DYNASTY        : __PARAMETERS
    __RELPATH        :
    __PROPERTY_COUNT : 3
    __DERIVATION     : {}
    __SERVER         :
    __NAMESPACE      :
    __PATH           :
    Domain           : DOMAIN01
    ReturnValue      : 0
    User             : user01

    This command shows how to find the owner of a process. Because the
    System.Diagnostics.Process object that Get-Process returns does not have a
    property or method that returns the process owner, the command uses the
    Get-WmiObject cmdlet to get a Win32_Process object that represents the same
    process.

    The first command uses Get-WmiObject to get the PowerShell process. It saves it
    in the $P variable.

    The second command uses the GetOwner method to get the owner of the process in
    $P. The command reveals that the owner is Domain01\user01.
    Example 9: Use an automatic variable to identify the process hosting the
    current session

    PS C:\>Get-Process powershell





    Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
    -------  ------    -----      ----- -----   ------     -- -----------
    308      26        52308      61780   567     3.18   5632 powershell
    377      26        62676      63384   575     3.88   5888 powershell PS
    C:\>Get-Process -Id $pid



    Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
    -------  ------    -----      ----- -----   ------     -- -----------
    396      26        56488      57236   575     3.90   5888 powershell

    These commands show how to use the $pid automatic variable to identify the
    process that is hosting the current Windows PowerShell session. You can use
    this method to distinguish the host process from other Windows PowerShell
    processes that you might want to stop or close. The first command gets all of
    the Windows PowerShell processes in the current session.

    The second command gets the Windows PowerShell process that is hosting the
    current session.
    Example 10: Get all processes that have a main window title and display them in
    a table

    PS C:\>Get-Process | where {$_.mainWindowTitle} | Format-Table id, name,
    mainwindowtitle -autosize

    This command gets all the processes that have a main window title, and it
    displays them in a table with the process ID and the process name.

    The mainWindowTitle property is just one of many useful properties of the
    Process object that Get-Process returns. To view all of the properties, pipe
    the results of a Get-Process command to the Get-Member cmdlet (get-process |
    get-member).

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821590
    Debug-Process
    Get-Process
    Start-Process
    Stop-Process
    Wait-Process



PS C:\>
PS>help Get-EventLog

NAME
    Get-EventLog

SYNOPSIS
    Gets the events in an event log, or a list of the event logs, on the local or
    remote computers.


SYNTAX
    Get-EventLog [-LogName] <String> [[-InstanceId] <Int64[]>] [-After <DateTime>]
    [-AsBaseObject] [-Before <DateTime>] [-ComputerName <String[]>] [-EntryType
    {Error | Information | FailureAudit | SuccessAudit | Warning}] [-Index
    <Int32[]>] [-Message <String>] [-Newest <Int32>] [-Source <String[]>]
    [-UserName <String[]>] [<CommonParameters>]

    Get-EventLog [-AsString] [-ComputerName <String[]>] [-List] [<CommonParameters>]


DESCRIPTION
    The Get-EventLog cmdlet gets events and event logs on the local and remote
    computers.

    You can use the parameters of this cmdlet to search for events by using their
    property values. This cmdlet gets only the events that match all of the
    specified property values.

    The cmdlets that contain the EventLog noun work only on classic event logs. To
    get events from logs that use the Windows Event Log technology in Windows Vista
    and later versions of Windows, use Get-WinEvent.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821585
    Clear-EventLog
    Limit-EventLog
    New-EventLog
    Remove-EventLog
    Show-EventLog
    Write-EventLog

REMARKS
    To see the examples, type: "get-help Get-EventLog -examples".
    For more information, type: "get-help Get-EventLog -detailed".
    For technical information, type: "get-help Get-EventLog -full".
    For online help, type: "get-help Get-EventLog -online"


PS C:\>
PS>help Get-EventLog -full

NAME
    Get-EventLog

SYNOPSIS
    Gets the events in an event log, or a list of the event logs, on the local or
    remote computers.


SYNTAX
    Get-EventLog [-LogName] <String> [[-InstanceId] <Int64[]>] [-After <DateTime>]
    [-AsBaseObject] [-Before <DateTime>] [-ComputerName <String[]>] [-EntryType
    {Error | Information | FailureAudit | SuccessAudit | Warning}] [-Index
    <Int32[]>] [-Message <String>] [-Newest <Int32>] [-Source <String[]>]
    [-UserName <String[]>] [<CommonParameters>]

    Get-EventLog [-AsString] [-ComputerName <String[]>] [-List] [<CommonParameters>]


DESCRIPTION
    The Get-EventLog cmdlet gets events and event logs on the local and remote
    computers.

    You can use the parameters of this cmdlet to search for events by using their
    property values. This cmdlet gets only the events that match all of the
    specified property values.

    The cmdlets that contain the EventLog noun work only on classic event logs. To
    get events from logs that use the Windows Event Log technology in Windows Vista
    and later versions of Windows, use Get-WinEvent.


PARAMETERS
    -After <DateTime>
        Specifies the data and time that this cmdlet get events that occur after.
        Enter a DateTime object, such as the one returned by the Get-Date cmdlet.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -AsBaseObject [<SwitchParameter>]
        Indicates that this cmdlet returns a standard
        System.Diagnostics.EventLogEntry object for each event. Without this
        parameter, this cmdlet returns an extended PSObject object with additional
        EventLogName , Source , and InstanceId properties.

        To see the effect of this parameter, pipe the events to the Get-Member
        cmdlet and examine the TypeName value in the result.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -AsString [<SwitchParameter>]
        Indicates that this cmdlet returns the output as strings, instead of
        objects.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Before <DateTime>
        Specifies the data and time that this cmdlet get events that occur before.
        Enter a DateTime object, such as the one returned by the Get-Date cmdlet.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -ComputerName <String[]>
        Specifies a remote computer. The default is the local computer.

        Type the NetBIOS name, an Internet Protocol (IP) address, or a fully
        qualified domain name (FQDN) of a remote computer. To specify the local
        computer, type the computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use
        the ComputerName parameter of Get-EventLog even if your computer is not
        configured to run remote commands.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -EntryType <String[]>
        Specifies, as a string array, the entry type of the events that this cmdlet
        gets.

        The acceptable values for this parameter are:

        - Error

        - Information

        - FailureAudit

        - SuccessAudit

        - Warning.

        The default is all events.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Index <Int32[]>
        Specifies the index values that this cmdlet gets events from.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -InstanceId <Int64[]>
        Specifies the instance IDs that this cmdlet gets events from.

        Required?                    false
        Position?                    1
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -List [<SwitchParameter>]
        Indicates that this cmdlet gets a list of event logs on the computer.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -LogName <String>
        Specifies the event log. Enter the log name (the value of the Log property;
        not the LogDisplayName) of one event log. Wildcard characters are not
        permitted. This parameter is required.

        Required?                    true
        Position?                    0
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Message <String>
        Specifies a string in the event message that this cmdlet gets event
        information from. You can use this property to search for messages that
        contain certain words or phrases. Wildcards are permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Newest <Int32>
        Specifies the maximum number of events that this cmdlet gets. This cmdlet
        gets the specified number of events, beginning with the newest event in the
        log.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Source <String[]>
        Specifies, as a string array, sources that were written to the log that
        this cmdlet gets. Wildcards are permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -UserName <String[]>
        Specifies, as a string array, user names that are associated with events.
        Enter names or name patterns, such as User01, User , or Domain01\User .
        Wildcards are permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    None.
        You cannot pipe input to this cmdlet.


OUTPUTS
    System.Diagnostics.EventLogEntry. System.Diagnostics.EventLog. System.String
        If the LogName parameter is specified, the output is a collection of
        System.Diagnostics.EventLogEntry objects.

        If only the List parameter is specified, the output is a collection of
        System.Diagnostics.EventLog objects.

        If both the List and AsString parameters are specified, the output is a
        collection of System.String objects.


NOTES


        * This cmdlet and the Get-WinEvent cmdlet are not supported in Windows
        Preinstallation Environment (Windows PE).

    Example 1: Get event logs on a computer

    PS C:\>Get-EventLog -List

    This command gets the event logs on the computer.
    Example 2: Get the five most recent entries from a specific event log

    PS C:\>Get-EventLog -Newest 5 -LogName "Application"

    This command gets the five most recent entries from the Application event log.
    Example 3: Find all sources that are represented in a specific number of
    entries in an event log

    PS C:\>$Events = Get-Eventlog -LogName system -Newest 1000
    PS C:\>$Events | Group-Object -Property source -noelement | Sort-Object
    -Property count -Descending











    Count Name
    ----- ----
    75    Service Control Manager
    12    Print
    6     UmrdpService
    2     DnsApi
    2     DCOM
    1     Dhcp
    1     TermDD
    1     volsnap

    This example shows how to find all of the sources that are represented in the
    1000 most recent entries in the System event log.

    The first command gets the 1,000 most recent entries from the System event log
    and stores them in the $Events variable.

    The second command uses a pipeline operator (|) to send the events in $Events
    to the Group-Object cmdlet, which groups the entries by the value of the Source
    property. The command uses a second pipeline operator to send the grouped
    events to the Sort-Object cmdlet, which sorts them in descending order, so the
    most frequently appearing source is listed first.

    Source is just one property of event log entries. To see all of the properties
    of an event log entry, pipe the event log entries to the Get-Member cmdlet.
    Example 4: Get error events from a specific event log

    PS C:\>Get-EventLog -LogName System -EntryType Error

    This command gets only error events from the System event log.
    Example 5: Get events from a specific event log with an Instance ID and Source
    value

    PS C:\>Get-EventLog -LogName System -InstanceID 3221235481 -Source "DCOM"

    This command gets events from the System log that have an InstanceID of
    3221235481 and a Source value of DCOM.
    Example 6: Get event log events from multiple computers

    PS C:\>Get-EventLog -LogName "Windows PowerShell" -ComputerName "localhost",
    "Server01", "Server02"

    This command gets the events from the Windows PowerShell event log on three
    computers, Server01, Server02, and the local computer, known as localhost.
    Example 7: Get all events in an event log that have include a specific word in
    the message value

    PS C:\>Get-EventLog -LogName "Windows PowerShell" -Message "*failed*"

    This command gets all the events in the Windows PowerShell event log that have
    a message value that includes the word failed.
    Example 8: Display the property values of an event in a list

    PS C:\>$A = Get-EventLog -Log System -Newest 1
    PS C:\>$A | Format-List -Property *

















    EventID            : 7036
    MachineName        : Server01
    Data               : {}
    Index              : 10238
    Category           : (0)
    CategoryNumber     : 0
    EntryType          : Information
    Message            : The description for Event ID
    Source             : Service Control Manager
    ReplacementStrings : {WinHTTP Web Proxy Auto-Disco
    InstanceId         : 1073748860
    TimeGenerated      : 4/11/2008 9:56:05 PM
    TimeWritten        : 4/11/2008 9:56:05 PM
    UserName           :
    Site               :
    Container          :

    This example shows how to display the property values of an event in a list.

    The first command gets the newest event from the System event log and saves it
    in the $A variable.

    The second command uses a pipeline operator (|) to send the event in $a to the
    Format-List command, which displays all (*) of the event properties.
    Example 9: Get events from an event log with using a source and event ID

    PS C:\>Get-EventLog -Log "Application" -Source "Outlook" | where {$_.eventID
    -eq 34}

    This command gets events in the Application event log where the source is
    Outlook and the event ID is 34. Even though this cmdlet does not have an
    EventID parameter, you can use the Where-Object cmdlet to select events based
    on the value of any event property.
    Example 10: Get event in an event log that is grouped by a property

    PS C:\>Get-EventLog -Log System -UserName "NT*" | Group-Object -Property
    "UserName" -noelement | Format-Table Count, Name -Auto






    Count Name
    ----- ----
    6031  NT AUTHORITY\SYSTEM
    42    NT AUTHORITY\LOCAL SERVICE
    4     NT AUTHORITY\NETWORK SERVICE

    This command returns the events in the system log grouped by the value of their
    UserName property. This command uses the UserName parameter to get only events
    in which the user name begins with NT*.
    Example 11: Get all errors in an event log that occurred during a specific time
    frame

    PS C:\>$May31 = Get-Date 5/31/08
    PS C:\>$July1 = Get-Date 7/01/08
    PS C:\>Get-EventLog -Log "Windows PowerShell" -EntryType Error -After $May31
    -before $July1

    This command gets all of the errors in the Windows PowerShell event log that
    occurred in June 2008.

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821585
    Clear-EventLog
    Limit-EventLog
    New-EventLog
    Remove-EventLog
    Show-EventLog
    Write-EventLog



PS C:\>
PS>get-service -full
>> TerminatingError(Get-Service): "A parameter cannot be found that matches parameter name 'full'."
Get-Service : A parameter cannot be found that matches parameter name 'full'.
At line:1 char:13
+ get-service -full
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : A parameter cannot be found that matches parameter name 'full'.
At line:1 char:13
+ get-service -full
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingE
   xception
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.
   GetServiceCommand

PS C:\>
PS>help get-service -full

NAME
    Get-Service

SYNOPSIS
    Gets the services on a local or remote computer.


SYNTAX
    Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName
    <String[]> [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices]
    [<CommonParameters>]

    Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude
    <String[]>] [-Include <String[]>] [-InputObject <ServiceController[]>]
    [-RequiredServices] [<CommonParameters>]

    Get-Service [[-Name] <String[]>] [-ComputerName <String[]>]
    [-DependentServices] [-Exclude <String[]>] [-Include <String[]>]
    [-RequiredServices] [<CommonParameters>]


DESCRIPTION
    The Get-Service cmdlet gets objects that represent the services on a local
    computer or on a remote computer, including running and stopped services.

    You can direct this cmdlet to get only particular services by specifying the
    service name or display name of the services, or you can pipe service objects
    to this cmdlet.


PARAMETERS
    -ComputerName <String[]>
        Gets the services running on the specified computers. The default is the
        local computer.

        Type the NetBIOS name, an IP address, or a fully qualified domain name
        (FQDN) of a remote computer. To specify the local computer, type the
        computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use
        the ComputerName parameter of Get-Service even if your computer is not
        configured to run remote commands.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -DependentServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that depend upon the
        specified service.

        By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -DisplayName <String[]>
        Specifies, as a string array, the display names of services to be
        retrieved. Wildcards are permitted. By default, this cmdlet gets all
        services on the computer.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Exclude <String[]>
        Specifies, as a string array, a service or services that this cmdlet
        excludes from the operation. The value of this parameter qualifies the Name
        parameter. Enter a name element or pattern, such as "s*". Wildcards are
        permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Include <String[]>
        Specifies, as a string array, a service or services that this cmdlet
        includes in the operation. The value of this parameter qualifies the Name
        parameter. Enter a name element or pattern, such as "s*". Wildcards are
        permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -InputObject <ServiceController[]>
        Specifies ServiceController objects representing the services to be
        retrieved. Enter a variable that contains the objects, or type a command or
        expression that gets the objects. You can also pipe a service object to
        this cmdlet.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies the service names of services to be retrieved. Wildcards are
        permitted. By default, this cmdlet gets all of the services on the computer.

        Required?                    false
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName, ByValue)
        Accept wildcard characters?  false

    -RequiredServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that this service
        requires.

        This parameter gets the value of the ServicesDependedOn property of the
        service. By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.ServiceProcess.ServiceController, System.String
        You can pipe a service object or a service name to this cmdlet.


OUTPUTS
    System.ServiceProcess.ServiceController
        This cmdlet returns objects that represent the services on the computer.


NOTES


        You can also refer to Get-Service * by its built-in alias, "gsv". For more
        information, see about_Aliases.

        This cmdlet can display services only when the current user has permission
        to see them. If this cmdlet does not display services, you might not have
        permission to see them.

        To find the service name and display name of each service on your system,
        type `Get-Service`. The service names appear in the Name column, and the
        display names appear in the DisplayName column.

        When you sort in ascending order by status value, "Stopped" services appear
        before "Running" services. The Status property of a service is an
        enumerated value in which the names of the statuses represent integer
        values. The sort is based on the integer value, not the name. "Running"
        appears before "Stopped" because "Stopped" has a value of "1", and
        "Running" has a value of "4".

        *

    Example 1: Get all services on the computer

    PS C:\>Get-Service

    This command gets all of the services on the computer. It behaves as though you
    typed `Get-Service *`. The default display shows the status, service name, and
    display name of each service.
    Example 2: Get services that begin with a search string

    PS C:\>Get-Service "wmi*"

    This command retrieves services with service names that begin with WMI (the
    acronym for Windows Management Instrumentation).
    Example 3: Display services that include a search string

    PS C:\>Get-Service -Displayname "*network*"

    This command displays services with a display name that includes the word
    network. Searching the display name finds network-related services even when
    the service name does not include "Net", such as xmlprov, the Network
    Provisioning Service.
    Example 4: Get services that begin with a search string and an exclusion

    PS C:\>Get-Service -Name "win*" -Exclude "WinRM"

    These commands get only the services with service names that begin with win,
    except for the WinRM service.
    Example 5: Display services that are currently active

    PS C:\>Get-Service | Where-Object {$_.Status -eq "Running"}

    This command displays only the services that are currently active. It uses the
    Get-Service cmdlet to get all of the services on the computer. The pipeline
    operator (|) passes the results to the Where-Object cmdlet, which selects only
    the services with a Status property that equals Running.

    Status is only one property of service objects. To see all of the properties,
    type `Get-Service | Get-Member`.
    Example 6: Get the services on a remote computer

    PS C:\>Get-Service -ComputerName "Server02"

    This command gets the services on the Server02 remote computer.

    Because the ComputerName parameter of Get-Service does not use Windows
    PowerShell remoting, you can use this parameter even if the computer is not
    configured for remoting in Windows PowerShell.
    Example 7: List the services on the local computer that have dependent services

    PS C:\>Get-Service | Where-Object {$_.DependentServices} | Format-List
    -Property Name, DependentServices, @{Label="NoOfDependentServices";
    Expression={$_.dependentservices.count}}








    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1
    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...

    This example lists the services on the computer that have dependent services.

    The first command uses the Get-Service cmdlet to get the services on the
    computer. A pipeline operator (|) sends the services to the Where-Object
    cmdlet, which selects the services whose DependentServices property is not null.

    Another pipeline operator sends the results to the Format-List cmdlet. The
    command uses its Property parameter to display the name of the service, the
    name of the dependent services, and a calculated property that displays the
    number of dependent services that each service has.
    Example 8: Sort services by property value

    PS C:\>Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon

    PS C:\>Get-Service "s*" | Sort-Object status -Descending

    Status   Name               DisplayName
    ------   ----               -----------
    Running  ShellHWDetection   Shell Hardware Detection
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  Spooler            Print Spooler
    Running  SSDPSRV            SSDP Discovery Service
    Running  srservice          System Restore Service
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  Schedule           Task Scheduler
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
    Stopped  SysmonLog          Performance Logs and Alerts
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  stisvc             Windows Image Acquisition (WIA)

    This command shows that when you sort services in ascending order by the value
    of their Status property, stopped services appear before running services. This
    happens because the value of Status is an enumeration, in which Stopped has a
    value of 1, and Running has a value of 4.

    To list running services first, use the Descending parameter of the Sort-Object
    cmdlet.
    Example 9: Get services on multiple computers

    PS C:\>Get-Service -Name "WinRM" -ComputerName "localhost", "Server01",
    "Server02" | Format-Table -Property MachineName, Status, Name, DisplayName -auto






    MachineName    Status  Name  DisplayName
    ------------   ------  ----  -----------
    localhost      Running WinRM Windows Remote Management (WS-Management)
    Server01       Running WinRM Windows Remote Management (WS-Management)
    Server02       Running WinRM Windows Remote Management (WS-Management)

    This command uses the Get-Service cmdlet to run a Get-Service Winrm command on
    two remote computers and the local computer ("localhost").

    The command runs on the remote computers, and the results are returned to the
    local computer. A pipeline operator (|) sends the results to the Format-Table
    cmdlet, which formats the services as a table. The Format-Table command uses
    the Property parameter to specify the properties displayed in the table,
    including the MachineName property.
    Example 10: Get the dependent services of a service

    PS C:\>Get-Service "WinRM" -RequiredServices

    This command gets the services that the WinRM service requires.

    The command returns the value of the ServicesDependedOn property of the service.
    Example 11: Get a service through the pipeline operator

    PS C:\>"WinRM" | Get-Service

    This command gets the WinRM service on the local computer. This example shows
    that you can pipe a service name string (enclosed in quotation marks) to
    Get-Service .

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821593
    New-Service
    Restart-Service
    Resume-Service
    Set-Service
    Start-Service
    Stop-Service
    Suspend-Service



PS C:\>
PS>help get-service -full

NAME
    Get-Service

SYNOPSIS
    Gets the services on a local or remote computer.


SYNTAX
    Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName
    <String[]> [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices]
    [<CommonParameters>]

    Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude
    <String[]>] [-Include <String[]>] [-InputObject <ServiceController[]>]
    [-RequiredServices] [<CommonParameters>]

    Get-Service [[-Name] <String[]>] [-ComputerName <String[]>]
    [-DependentServices] [-Exclude <String[]>] [-Include <String[]>]
    [-RequiredServices] [<CommonParameters>]


DESCRIPTION
    The Get-Service cmdlet gets objects that represent the services on a local
    computer or on a remote computer, including running and stopped services.

    You can direct this cmdlet to get only particular services by specifying the
    service name or display name of the services, or you can pipe service objects
    to this cmdlet.


PARAMETERS
    -ComputerName <String[]>
        Gets the services running on the specified computers. The default is the
        local computer.

        Type the NetBIOS name, an IP address, or a fully qualified domain name
        (FQDN) of a remote computer. To specify the local computer, type the
        computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use
        the ComputerName parameter of Get-Service even if your computer is not
        configured to run remote commands.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -DependentServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that depend upon the
        specified service.

        By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -DisplayName <String[]>
        Specifies, as a string array, the display names of services to be
        retrieved. Wildcards are permitted. By default, this cmdlet gets all
        services on the computer.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Exclude <String[]>
        Specifies, as a string array, a service or services that this cmdlet
        excludes from the operation. The value of this parameter qualifies the Name
        parameter. Enter a name element or pattern, such as "s*". Wildcards are
        permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Include <String[]>
        Specifies, as a string array, a service or services that this cmdlet
        includes in the operation. The value of this parameter qualifies the Name
        parameter. Enter a name element or pattern, such as "s*". Wildcards are
        permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -InputObject <ServiceController[]>
        Specifies ServiceController objects representing the services to be
        retrieved. Enter a variable that contains the objects, or type a command or
        expression that gets the objects. You can also pipe a service object to
        this cmdlet.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies the service names of services to be retrieved. Wildcards are
        permitted. By default, this cmdlet gets all of the services on the computer.

        Required?                    false
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName, ByValue)
        Accept wildcard characters?  false

    -RequiredServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that this service
        requires.

        This parameter gets the value of the ServicesDependedOn property of the
        service. By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.ServiceProcess.ServiceController, System.String
        You can pipe a service object or a service name to this cmdlet.


OUTPUTS
    System.ServiceProcess.ServiceController
        This cmdlet returns objects that represent the services on the computer.


NOTES


        You can also refer to Get-Service * by its built-in alias, "gsv". For more
        information, see about_Aliases.

        This cmdlet can display services only when the current user has permission
        to see them. If this cmdlet does not display services, you might not have
        permission to see them.

        To find the service name and display name of each service on your system,
        type `Get-Service`. The service names appear in the Name column, and the
        display names appear in the DisplayName column.

        When you sort in ascending order by status value, "Stopped" services appear
        before "Running" services. The Status property of a service is an
        enumerated value in which the names of the statuses represent integer
        values. The sort is based on the integer value, not the name. "Running"
        appears before "Stopped" because "Stopped" has a value of "1", and
        "Running" has a value of "4".

        *

    Example 1: Get all services on the computer

    PS C:\>Get-Service

    This command gets all of the services on the computer. It behaves as though you
    typed `Get-Service *`. The default display shows the status, service name, and
    display name of each service.
    Example 2: Get services that begin with a search string

    PS C:\>Get-Service "wmi*"

    This command retrieves services with service names that begin with WMI (the
    acronym for Windows Management Instrumentation).
    Example 3: Display services that include a search string

    PS C:\>Get-Service -Displayname "*network*"

    This command displays services with a display name that includes the word
    network. Searching the display name finds network-related services even when
    the service name does not include "Net", such as xmlprov, the Network
    Provisioning Service.
    Example 4: Get services that begin with a search string and an exclusion

    PS C:\>Get-Service -Name "win*" -Exclude "WinRM"

    These commands get only the services with service names that begin with win,
    except for the WinRM service.
    Example 5: Display services that are currently active

    PS C:\>Get-Service | Where-Object {$_.Status -eq "Running"}

    This command displays only the services that are currently active. It uses the
    Get-Service cmdlet to get all of the services on the computer. The pipeline
    operator (|) passes the results to the Where-Object cmdlet, which selects only
    the services with a Status property that equals Running.

    Status is only one property of service objects. To see all of the properties,
    type `Get-Service | Get-Member`.
    Example 6: Get the services on a remote computer

    PS C:\>Get-Service -ComputerName "Server02"

    This command gets the services on the Server02 remote computer.

    Because the ComputerName parameter of Get-Service does not use Windows
    PowerShell remoting, you can use this parameter even if the computer is not
    configured for remoting in Windows PowerShell.
    Example 7: List the services on the local computer that have dependent services

    PS C:\>Get-Service | Where-Object {$_.DependentServices} | Format-List
    -Property Name, DependentServices, @{Label="NoOfDependentServices";
    Expression={$_.dependentservices.count}}








    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1
    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...

    This example lists the services on the computer that have dependent services.

    The first command uses the Get-Service cmdlet to get the services on the
    computer. A pipeline operator (|) sends the services to the Where-Object
    cmdlet, which selects the services whose DependentServices property is not null.

    Another pipeline operator sends the results to the Format-List cmdlet. The
    command uses its Property parameter to display the name of the service, the
    name of the dependent services, and a calculated property that displays the
    number of dependent services that each service has.
    Example 8: Sort services by property value

    PS C:\>Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon

    PS C:\>Get-Service "s*" | Sort-Object status -Descending

    Status   Name               DisplayName
    ------   ----               -----------
    Running  ShellHWDetection   Shell Hardware Detection
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  Spooler            Print Spooler
    Running  SSDPSRV            SSDP Discovery Service
    Running  srservice          System Restore Service
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  Schedule           Task Scheduler
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
    Stopped  SysmonLog          Performance Logs and Alerts
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  stisvc             Windows Image Acquisition (WIA)

    This command shows that when you sort services in ascending order by the value
    of their Status property, stopped services appear before running services. This
    happens because the value of Status is an enumeration, in which Stopped has a
    value of 1, and Running has a value of 4.

    To list running services first, use the Descending parameter of the Sort-Object
    cmdlet.
    Example 9: Get services on multiple computers

    PS C:\>Get-Service -Name "WinRM" -ComputerName "localhost", "Server01",
    "Server02" | Format-Table -Property MachineName, Status, Name, DisplayName -auto






    MachineName    Status  Name  DisplayName
    ------------   ------  ----  -----------
    localhost      Running WinRM Windows Remote Management (WS-Management)
    Server01       Running WinRM Windows Remote Management (WS-Management)
    Server02       Running WinRM Windows Remote Management (WS-Management)

    This command uses the Get-Service cmdlet to run a Get-Service Winrm command on
    two remote computers and the local computer ("localhost").

    The command runs on the remote computers, and the results are returned to the
    local computer. A pipeline operator (|) sends the results to the Format-Table
    cmdlet, which formats the services as a table. The Format-Table command uses
    the Property parameter to specify the properties displayed in the table,
    including the MachineName property.
    Example 10: Get the dependent services of a service

    PS C:\>Get-Service "WinRM" -RequiredServices

    This command gets the services that the WinRM service requires.

    The command returns the value of the ServicesDependedOn property of the service.
    Example 11: Get a service through the pipeline operator

    PS C:\>"WinRM" | Get-Service

    This command gets the WinRM service on the local computer. This example shows
    that you can pipe a service name string (enclosed in quotation marks) to
    Get-Service .

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821593
    New-Service
    Restart-Service
    Resume-Service
    Set-Service
    Start-Service
    Stop-Service
    Suspend-Service



PS C:\>
**********************
Windows PowerShell transcript end
End time: 20161120193317
**********************
